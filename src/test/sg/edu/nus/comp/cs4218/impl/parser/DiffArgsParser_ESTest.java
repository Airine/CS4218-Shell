/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:40:36 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.parser.DiffArgsParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiffArgsParser_ESTest extends DiffArgsParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      List<String> list0 = diffArgsParser0.nonFlagArgs;
      diffArgsParser0.nonFlagArgs = list0;
      diffArgsParser0.nonFlagArgs = null;
      List<String> list1 = diffArgsParser0.getDiffFile();
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "illegal option -- ";
      stringArray0[2] = "illegal option -- ";
      stringArray0[3] = "illegal option -- ";
      stringArray0[4] = "illegal option -- ";
      stringArray0[5] = "illegal option -- ";
      diffArgsParser0.parse(stringArray0);
      List<String> list0 = diffArgsParser0.getDiffFile();
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      diffArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        diffArgsParser0.isReportIdentical();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      diffArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        diffArgsParser0.isMsgDiff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      diffArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        diffArgsParser0.isIgnoreBlanks();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      Set<Character> set0 = diffArgsParser0.legalFlags;
      diffArgsParser0.flags = set0;
      boolean boolean0 = diffArgsParser0.isMsgDiff();
      assertTrue(diffArgsParser0.isIgnoreBlanks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      boolean boolean0 = diffArgsParser0.isMsgDiff();
      assertFalse(boolean0);
      assertFalse(diffArgsParser0.isIgnoreBlanks());
      assertFalse(diffArgsParser0.isReportIdentical());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      Set<Character> set0 = diffArgsParser0.legalFlags;
      diffArgsParser0.flags = set0;
      boolean boolean0 = diffArgsParser0.isIgnoreBlanks();
      assertTrue(diffArgsParser0.isMsgDiff());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      boolean boolean0 = diffArgsParser0.isIgnoreBlanks();
      assertFalse(boolean0);
      assertFalse(diffArgsParser0.isMsgDiff());
      assertFalse(diffArgsParser0.isReportIdentical());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      Set<Character> set0 = diffArgsParser0.legalFlags;
      diffArgsParser0.flags = set0;
      boolean boolean0 = diffArgsParser0.isReportIdentical();
      assertTrue(diffArgsParser0.isMsgDiff());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      boolean boolean0 = diffArgsParser0.isReportIdentical();
      assertFalse(diffArgsParser0.isMsgDiff());
      assertFalse(diffArgsParser0.isIgnoreBlanks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiffArgsParser diffArgsParser0 = new DiffArgsParser();
      diffArgsParser0.getDiffFile();
      assertFalse(diffArgsParser0.isIgnoreBlanks());
      assertFalse(diffArgsParser0.isMsgDiff());
      assertFalse(diffArgsParser0.isReportIdentical());
  }
}
