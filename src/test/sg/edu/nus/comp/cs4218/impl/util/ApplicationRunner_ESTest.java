/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:32:22 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationRunner_ESTest extends ApplicationRunner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "cd";
      stringArray0[2] = "grep";
      stringArray0[3] = "diff";
      stringArray0[4] = "sort";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("ls", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[3];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: : Invalid app
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[6];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("paste", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // paste: Null arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.PasteApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[9];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("sort", stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // sort: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.SortApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("grep", (String[]) null, inputStream0, outputStream0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.GrepException
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.GrepApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[0];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("find", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No folder specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[0];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("exit", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[3];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      applicationRunner0.runApp("echo", stringArray0, inputStream0, outputStream0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[4];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("sed", stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // sed: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.SedApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[6];
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("cut", stringArray0, (InputStream) null, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cut: null
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CutApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[6];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("wc", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.WcArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[3];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("rm", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.RmApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[2];
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        applicationRunner0.runApp("mv", stringArray0, (InputStream) null, bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApplicationRunner applicationRunner0 = new ApplicationRunner();
      String[] stringArray0 = new String[5];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        applicationRunner0.runApp("cd", stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Too many arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }
}
