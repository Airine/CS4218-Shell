/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:37:10 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.nio.file.Path;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.util.IOUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils.openOutputStream(")U<Cl>CKoz\"0i<");
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(")U<Cl>CKoz\"0i<").when(file0).getAbsolutePath();
      InputStream inputStream0 = IOUtils.openInputStream(file0);
      assertEquals(0, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.resolveFilePath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      try { 
        IOUtils.openOutputStream("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.openOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.openInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      // Undeclared exception!
      try { 
        IOUtils.openInputStream(file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      try { 
        IOUtils.getLinesFromInputStream(sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~~zZ>0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      OutputStream outputStream0 = IOUtils.openOutputStream("~~zZ>0");
      try { 
        IOUtils.closeOutputStream(outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Unable to close streams
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~~zZ>0");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "~~zZ>0");
      InputStream inputStream0 = IOUtils.openInputStream("~~zZ>0");
      try { 
        IOUtils.closeInputStream(inputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Unable to close streams
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Path path0 = IOUtils.resolveFilePath("~~zZ>0");
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~~zZ>0");
      IOUtils.openOutputStream("~~zZ>0");
      InputStream inputStream0 = IOUtils.openInputStream("~~zZ>0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "~~zZ>0");
      List<String> list0 = IOUtils.getLinesFromInputStream(inputStream0);
      assertTrue(list0.contains("~~zZ>0"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List<String> list0 = IOUtils.getLinesFromInputStream((InputStream) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IOUtils.openOutputStream("~~zZ>0");
      InputStream inputStream0 = IOUtils.openInputStream("~~zZ>0");
      List<String> list0 = IOUtils.getLinesFromInputStream(inputStream0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.closeOutputStream((OutputStream) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputStream outputStream0 = IOUtils.openOutputStream("~~zZ>0");
      IOUtils.closeOutputStream(outputStream0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.openOutputStream("~~zZ>0");
      InputStream inputStream0 = IOUtils.openInputStream("~~zZ>0");
      IOUtils.closeInputStream(inputStream0);
      try { 
        IOUtils.getLinesFromInputStream(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.closeInputStream((InputStream) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      try { 
        IOUtils.openInputStream(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        IOUtils.openInputStream("=X{=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IOUtils", e);
      }
  }
}
