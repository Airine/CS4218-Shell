/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:37:41 GMT 2020
 */

package generated;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.CdApplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CdApplication_ESTest extends CdApplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      String[] stringArray0 = new String[0];
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2915), (-2915));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X0ji'pgcaRL<B", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        cdApplication0.run(stringArray0, dataInputStream0, dataOutputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      try { 
        cdApplication0.changeToDirectory("/7*3l");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: /7*3l: No such file or directory
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      cdApplication0.changeToDirectory("/Users/dr.fat/IdeaProjects/cs4218-project-ay1920-s2-2020-team6");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      cdApplication0.changeToDirectory(".");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      String[] stringArray0 = new String[1];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        cdApplication0.run(stringArray0, mockFileInputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CdApplication cdApplication0 = new CdApplication();
      try { 
        cdApplication0.run(stringArray0, (InputStream) null, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      String[] stringArray0 = new String[6];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      try { 
        cdApplication0.run(stringArray0, sequenceInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Too many arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CdApplication cdApplication0 = new CdApplication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'", true);
      try { 
        cdApplication0.run((String[]) null, (InputStream) null, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Null arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MockFile mockFile0 = new MockFile("t:+3$FUG/dDRN7Rq", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      CdApplication cdApplication0 = new CdApplication();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      try { 
        cdApplication0.run(stringArray0, mockFileInputStream0, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cd: Insufficient arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.CdApplication", e);
      }
  }
}
