/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:36:21 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver;
import sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IORedirectionHandler_ESTest extends IORedirectionHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(outputStream0).toString();
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, (InputStream) null, outputStream0, argumentResolver0);
      OutputStream outputStream1 = iORedirectionHandler0.getOutputStream();
      assertSame(outputStream1, outputStream0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, (InputStream) null, outputStream0, (ArgumentResolver) null);
      InputStream inputStream0 = iORedirectionHandler0.getInputStream();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, inputStream0, outputStream0, argumentResolver0);
      try { 
        iORedirectionHandler0.extractRedirOptions();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.IORedirectionHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, inputStream0, (OutputStream) null, argumentResolver0);
      OutputStream outputStream0 = iORedirectionHandler0.getOutputStream();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn("?%Lzm").when(inputStream0).toString();
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, inputStream0, (OutputStream) null, argumentResolver0);
      InputStream inputStream1 = iORedirectionHandler0.getInputStream();
      assertSame(inputStream1, inputStream0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, inputStream0, outputStream0, argumentResolver0);
      List<String> list0 = iORedirectionHandler0.getNoRedirArgsList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      IORedirectionHandler iORedirectionHandler0 = new IORedirectionHandler((List<String>) null, inputStream0, outputStream0, argumentResolver0);
      iORedirectionHandler0.close();
  }
}
