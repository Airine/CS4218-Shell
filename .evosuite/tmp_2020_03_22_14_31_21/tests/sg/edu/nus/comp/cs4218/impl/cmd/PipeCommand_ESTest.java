/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:37:57 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.cmd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.cmd.CallCommand;
import sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PipeCommand_ESTest extends PipeCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipeCommand pipeCommand0 = new PipeCommand((List<CallCommand>) null);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pipeCommand0.evaluate(inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.PipeCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipeCommand pipeCommand0 = new PipeCommand((List<CallCommand>) null);
      List<CallCommand> list0 = pipeCommand0.getCallCommands();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipeCommand pipeCommand0 = new PipeCommand((List<CallCommand>) null);
      pipeCommand0.terminate();
  }
}
