/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:40:31 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.parser.RmArgsParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RmArgsParser_ESTest extends RmArgsParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      rmArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        rmArgsParser0.isRecursive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      rmArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        rmArgsParser0.isEmptyFolder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      rmArgsParser0.nonFlagArgs = (List<String>) linkedList0;
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        rmArgsParser0.files();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "illegal option -- ";
      rmArgsParser0.parse(stringArray0);
      String[] stringArray1 = rmArgsParser0.files();
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      rmArgsParser0.files();
      assertFalse(rmArgsParser0.isRecursive());
      assertFalse(rmArgsParser0.isEmptyFolder());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      Set<Character> set0 = rmArgsParser0.legalFlags;
      rmArgsParser0.flags = set0;
      boolean boolean0 = rmArgsParser0.isEmptyFolder();
      assertTrue(rmArgsParser0.isRecursive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      boolean boolean0 = rmArgsParser0.isEmptyFolder();
      assertFalse(boolean0);
      assertFalse(rmArgsParser0.isRecursive());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      Set<Character> set0 = rmArgsParser0.legalFlags;
      rmArgsParser0.flags = set0;
      boolean boolean0 = rmArgsParser0.isRecursive();
      assertTrue(rmArgsParser0.isEmptyFolder());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RmArgsParser rmArgsParser0 = new RmArgsParser();
      boolean boolean0 = rmArgsParser0.isRecursive();
      assertFalse(boolean0);
      assertFalse(rmArgsParser0.isEmptyFolder());
  }
}
