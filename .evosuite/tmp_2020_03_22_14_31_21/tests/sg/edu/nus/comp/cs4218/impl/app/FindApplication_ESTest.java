/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:33:29 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.Environment;
import sg.edu.nus.comp.cs4218.impl.app.FindApplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindApplication_ESTest extends FindApplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5iYUhMc:}1P*<S";
      stringArray0[1] = "-name";
      stringArray0[2] = "5iYUhMc:}1P*<S";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, pipedInputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: null
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Arguments should not be empty";
      stringArray0[1] = "Arguments should not be empty";
      stringArray0[2] = "Permission Denied";
      stringArray0[3] = "Flag must be -name";
      stringArray0[4] = "os.name";
      stringArray0[5] = "$";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: null
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6#<H5GpXZ:Sa$8";
      stringArray0[1] = "No file specified";
      stringArray0[2] = "Permission Denied";
      stringArray0[3] = ".K40";
      String string0 = findApplication0.findFolderContent(".", stringArray0);
      assertNotNull(string0);
      assertEquals("find: 6#<H5GpXZ:Sa$8: No such file or directory\nfind: No file specified: No such file or directory\nfind: Permission Denied: No such file or directory\nfind: .K40: No such file or directory", string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = findApplication0.findFolderContent("]An50*W<p`", stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("13:hy");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "No folder specified");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-name";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        findApplication0.findFolderContent("13:hy", stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.FindException
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-name";
      stringArray0[1] = "No folder specified";
      stringArray0[2] = "Only one filename is allowed";
      stringArray0[3] = "Permission Denied";
      stringArray0[4] = "";
      Environment.currentDirectory = "";
      // Undeclared exception!
      try { 
        findApplication0.findFolderContent("Arguments should not be empty", stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.FindException
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null Pointer Exception";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Null Pointer Exception");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "No folder specified");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        findApplication0.findFolderContent("ZAy:<q_JeN7`Zq `bs", stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.FindException
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[2];
      try { 
        findApplication0.findFolderContent("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No file specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[4];
      try { 
        findApplication0.findFolderContent((String) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No file specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[0];
      try { 
        findApplication0.findFolderContent("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No folder specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      try { 
        findApplication0.findFolderContent("I{45hEI@3)->3qg;+X", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No folder specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6#<H5GpXZ:Sa$8";
      stringArray0[1] = "No file specified";
      stringArray0[2] = "Permission Denied";
      stringArray0[3] = ".K40";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No file specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      assertNotNull(findApplication0);
      
      String[] stringArray0 = new String[0];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: No folder specified
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Flag must be -name";
      stringArray0[1] = "-name";
      stringArray0[2] = "Only one filename is allowed";
      stringArray0[3] = "TA\"u1AtG~E";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: Only one filename is allowed
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-.29e#JO>T~~4.]@55";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: Flag must be -name
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Null Pointer Exception";
      stringArray0[1] = "No folder specified";
      stringArray0[2] = "No folder specified";
      stringArray0[3] = "";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        findApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: Arguments should not be empty
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      try { 
        findApplication0.run((String[]) null, (InputStream) null, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // find: Null Pointer Exception
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.FindApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindApplication findApplication0 = new FindApplication();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "No file specified";
      stringArray0[1] = "Only one filename is allowed";
      stringArray0[2] = "Only one filename is allowed";
      stringArray0[3] = "No folder specified";
      stringArray0[4] = "Only one filename is allowed";
      stringArray0[5] = "Arguments should not be empty";
      stringArray0[6] = "-name";
      stringArray0[7] = "Permission Denied";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      findApplication0.run(stringArray0, inputStream0, outputStream0);
      assertEquals(8, stringArray0.length);
  }
}
