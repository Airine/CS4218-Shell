/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:38:46 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.cmd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.cmd.CallCommand;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;
import sg.edu.nus.comp.cs4218.impl.util.ArgumentResolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CallCommand_ESTest extends CallCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      CallCommand callCommand0 = null;
      try {
        callCommand0 = new CallCommand((List<String>) null, (ApplicationRunner) null, argumentResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0, argumentResolver0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        callCommand0.evaluate(inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.cmd.CallCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0, argumentResolver0);
      List<String> list0 = callCommand0.getArgsList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      ArgumentResolver argumentResolver0 = mock(ArgumentResolver.class, new ViolatedAssumptionAnswer());
      CallCommand callCommand0 = new CallCommand((List<String>) null, applicationRunner0, argumentResolver0);
      callCommand0.terminate();
  }
}
