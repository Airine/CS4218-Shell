/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:38:38 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.parser.MvArgsParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MvArgsParser_ESTest extends MvArgsParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "illegal option -- ";
      stringArray0[1] = "illegal option -- ";
      mvArgsParser0.parse(stringArray0);
      String string0 = mvArgsParser0.getDestFilePathName();
      assertEquals("illegal option -- ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "illegal option -- ";
      stringArray0[1] = "illegal option -- ";
      stringArray0[2] = "";
      mvArgsParser0.parse(stringArray0);
      String string0 = mvArgsParser0.getDestFilePathName();
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      mvArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        mvArgsParser0.isOverwrite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      mvArgsParser0.nonFlagArgs = null;
      // Undeclared exception!
      try { 
        mvArgsParser0.getToMoveFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.parser.MvArgsParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      mvArgsParser0.nonFlagArgs = null;
      // Undeclared exception!
      try { 
        mvArgsParser0.getDestFilePathName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.parser.MvArgsParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      String string0 = mvArgsParser0.getDestFilePathName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "illegal option -- ";
      stringArray0[1] = "illegal option -- ";
      stringArray0[2] = "illegal option -- ";
      mvArgsParser0.parse(stringArray0);
      mvArgsParser0.getToMoveFileName();
      String string0 = mvArgsParser0.getDestFilePathName();
      assertEquals("illegal option -- ", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      mvArgsParser0.getToMoveFileName();
      String[] stringArray0 = mvArgsParser0.getToMoveFileName();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      assertTrue(mvArgsParser0.isOverwrite());
      
      Set<Character> set0 = mvArgsParser0.legalFlags;
      mvArgsParser0.flags = set0;
      boolean boolean0 = mvArgsParser0.isOverwrite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MvArgsParser mvArgsParser0 = new MvArgsParser();
      boolean boolean0 = mvArgsParser0.isOverwrite();
      assertTrue(boolean0);
  }
}
