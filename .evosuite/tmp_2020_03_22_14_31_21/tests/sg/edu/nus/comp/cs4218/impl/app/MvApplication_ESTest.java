/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:36:26 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.app;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.MvApplication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MvApplication_ESTest extends MvApplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[2];
          stringArray0[0] = "%Mx";
          stringArray0[1] = "";
          InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          // Undeclared exception!
          try { 
            mvApplication0.run(stringArray0, inputStream0, pipedOutputStream0);
            fail("Expecting exception: ClassCastException");
          
          } catch(ClassCastException e) {
             //
             // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.MvException
             //
             verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[1];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mvApplication0.run(stringArray0, inputStream0, (OutputStream) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to sg.edu.nus.comp.cs4218.exception.MvException
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lG8&(o( 7m<vd";
      stringArray0[1] = "lG8&(o( 7m<vd";
      stringArray0[2] = "lG8&(o( 7m<vd";
      stringArray0[3] = "lG8&(o( 7m<vd";
      stringArray0[4] = "lG8&(o( 7m<vd";
      stringArray0[5] = "lG8&(o( 7m<vd";
      stringArray0[6] = "lG8&(o( 7m<vd";
      stringArray0[7] = "lG8&(o( 7m<vd";
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      mvApplication0.run(stringArray0, inputStream0, outputStream0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[2];
          stringArray0[0] = "";
          stringArray0[1] = "Cb.T/.5h^l-f*X8-Xid";
          InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
          OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
          mvApplication0.run(stringArray0, inputStream0, outputStream0);
          assertEquals(2, stringArray0.length);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[0];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      mvApplication0.run(stringArray0, inputStream0, outputStream0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      try { 
        mvApplication0.run((String[]) null, inputStream0, outputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: Null arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[7];
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mvApplication0.run(stringArray0, inputStream0, outputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[4];
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arK/lpo/2g^JmQ1N[0");
          byte[] byteArray0 = new byte[9];
          FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          stringArray0[0] = "2g^JmQ1N[0";
          try { 
            mvApplication0.mvFilesToFolder("arK/lpo", stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dr.fat/IdeaProjects/cs4218-project-ay1920-s2-2020-team6/2g^JmQ1N[0\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvFilesToFolder(MvApplication.java:48)
             // sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      try { 
        mvApplication0.mvFilesToFolder("\"2r=db^`", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // mv: \"2r=db^` is the sub dir of \"2r=db^` or they are the same file.
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.MvApplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MvApplication mvApplication0 = new MvApplication();
          String[] stringArray0 = new String[4];
          stringArray0[0] = "E9Mib>fr%d.VPYBSI";
          try { 
            mvApplication0.mvFilesToFolder("", stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"/Users/dr.fat/IdeaProjects/cs4218-project-ay1920-s2-2020-team6/E9Mib>fr%d.VPYBSI\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixCopyFile.move(UnixCopyFile.java:378)
             // sun.nio.fs.UnixFileSystemProvider.move(UnixFileSystemProvider.java:262)
             // java.nio.file.Files.move(Files.java:1395)
             // sg.edu.nus.comp.cs4218.impl.app.MvApplication.mvFilesToFolder(MvApplication.java:48)
             // sun.reflect.GeneratedMethodAccessor41.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[2];
      try { 
        mvApplication0.mvFilesToFolder("\"2r=db^`", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      String[] stringArray0 = new String[0];
      String string0 = mvApplication0.mvFilesToFolder("", stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MvApplication mvApplication0 = new MvApplication();
      try { 
        mvApplication0.mvSrcFileToDestFile("G}uyj/_hL`>hN=pi", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
