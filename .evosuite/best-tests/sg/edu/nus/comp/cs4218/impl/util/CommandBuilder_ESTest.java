/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:35:28 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.Command;
import sg.edu.nus.comp.cs4218.impl.util.ApplicationRunner;
import sg.edu.nus.comp.cs4218.impl.util.CommandBuilder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommandBuilder_ESTest extends CommandBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommandBuilder.parseCommand("g= j2;CiN", (ApplicationRunner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      try { 
        CommandBuilder.parseCommand(";:N$y1r6-h", applicationRunner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.CommandBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      try { 
        CommandBuilder.parseCommand("|J@}CZ7i3FDY", applicationRunner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.CommandBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      try { 
        CommandBuilder.parseCommand("fdu2Rv,`^:J", applicationRunner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.CommandBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      CommandBuilder.parseCommand("H&}S+Sf|B{", applicationRunner0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      CommandBuilder.parseCommand("eLZujK<&egk", applicationRunner0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      try { 
        CommandBuilder.parseCommand("]j}TjU+zjyA0E'", applicationRunner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.CommandBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      Command command0 = CommandBuilder.parseCommand("n%k6W>5+uW51;Y:$m", applicationRunner0);
      assertNotNull(command0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ApplicationRunner applicationRunner0 = mock(ApplicationRunner.class, new ViolatedAssumptionAnswer());
      try { 
        CommandBuilder.parseCommand("", applicationRunner0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // shell: Invalid syntax
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.util.CommandBuilder", e);
      }
  }
}
