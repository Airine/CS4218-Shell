/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:37:08 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.app.args;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.args.CutArguments;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CutArguments_ESTest extends CutArguments_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",";
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid flag option supplied
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.CutArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Al-B";
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid flag option supplied
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.CutArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "N?nENT";
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid flag option supplied
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.CutArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[1];
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Insufficient arguments
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.CutArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      String[] stringArray0 = new String[3];
      try { 
        cutArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("sg.edu.nus.comp.cs4218.impl.app.args.CutArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      int int0 = cutArguments0.getEndIdx();
      assertFalse(cutArguments0.isCharPo());
      assertEquals(0, int0);
      assertFalse(cutArguments0.isRange());
      assertFalse(cutArguments0.isBytePo());
      assertEquals(0, cutArguments0.getStartIdx());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      boolean boolean0 = cutArguments0.isBytePo();
      assertEquals(0, cutArguments0.getEndIdx());
      assertFalse(boolean0);
      assertEquals(0, cutArguments0.getStartIdx());
      assertFalse(cutArguments0.isRange());
      assertFalse(cutArguments0.isCharPo());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      cutArguments0.getFiles();
      assertEquals(0, cutArguments0.getEndIdx());
      assertEquals(0, cutArguments0.getStartIdx());
      assertFalse(cutArguments0.isRange());
      assertFalse(cutArguments0.isBytePo());
      assertFalse(cutArguments0.isCharPo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      boolean boolean0 = cutArguments0.isRange();
      assertFalse(cutArguments0.isCharPo());
      assertFalse(boolean0);
      assertEquals(0, cutArguments0.getStartIdx());
      assertEquals(0, cutArguments0.getEndIdx());
      assertFalse(cutArguments0.isBytePo());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      boolean boolean0 = cutArguments0.isCharPo();
      assertFalse(boolean0);
      assertEquals(0, cutArguments0.getStartIdx());
      assertEquals(0, cutArguments0.getEndIdx());
      assertFalse(cutArguments0.isBytePo());
      assertFalse(cutArguments0.isRange());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CutArguments cutArguments0 = new CutArguments();
      int int0 = cutArguments0.getStartIdx();
      assertFalse(cutArguments0.isCharPo());
      assertEquals(0, cutArguments0.getEndIdx());
      assertEquals(0, int0);
      assertFalse(cutArguments0.isBytePo());
      assertFalse(cutArguments0.isRange());
  }
}
