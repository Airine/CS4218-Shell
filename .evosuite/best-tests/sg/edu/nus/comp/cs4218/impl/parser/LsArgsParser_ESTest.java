/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:39:34 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.parser.LsArgsParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LsArgsParser_ESTest extends LsArgsParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      lsArgsParser0.nonFlagArgs = null;
      List<String> list0 = lsArgsParser0.getDirectories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "illegal option -- ";
      lsArgsParser0.parse(stringArray0);
      List<String> list0 = lsArgsParser0.getDirectories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      lsArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        lsArgsParser0.isRecursive();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      lsArgsParser0.flags = null;
      // Undeclared exception!
      try { 
        lsArgsParser0.isFoldersOnly();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      Set<Character> set0 = lsArgsParser0.legalFlags;
      lsArgsParser0.flags = set0;
      lsArgsParser0.isRecursive();
      assertTrue(lsArgsParser0.isFoldersOnly());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      Boolean boolean0 = lsArgsParser0.isRecursive();
      assertFalse(lsArgsParser0.isFoldersOnly());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      Set<Character> set0 = lsArgsParser0.legalFlags;
      lsArgsParser0.flags = set0;
      lsArgsParser0.isFoldersOnly();
      assertTrue(lsArgsParser0.isRecursive());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      Boolean boolean0 = lsArgsParser0.isFoldersOnly();
      assertFalse(lsArgsParser0.isRecursive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LsArgsParser lsArgsParser0 = new LsArgsParser();
      lsArgsParser0.getDirectories();
      assertFalse(lsArgsParser0.isFoldersOnly());
      assertFalse(lsArgsParser0.isRecursive());
  }
}
