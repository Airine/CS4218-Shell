/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:34:31 GMT 2020
 */

package sg.edu.nus.comp.cs4218.impl.app.args;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sg.edu.nus.comp.cs4218.impl.app.args.SortArguments;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SortArguments_ESTest extends SortArguments_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-wB#/V &CH$`Q}";
      // Undeclared exception!
      try { 
        sortArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ")1\u0003CqH+QqiyJH}";
      // Undeclared exception!
      try { 
        sortArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "zf@V=`@;r`CL(T";
      stringArray0[1] = "X*a>)Mm6V H4xm";
      stringArray0[2] = "@J>]WY<e\"%e";
      sortArguments0.parse(stringArray0);
      List<String> list0 = sortArguments0.getFiles();
      assertTrue(list0.contains("zf@V=`@;r`CL(T"));
      assertFalse(sortArguments0.isCaseIndependent());
      assertFalse(sortArguments0.isFirstWordNumber());
      assertFalse(sortArguments0.isReverseOrder());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-fP@Bt1iGM&,`";
      // Undeclared exception!
      try { 
        sortArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-+";
      // Undeclared exception!
      try { 
        sortArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-";
      // Undeclared exception!
      try { 
        sortArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      String[] stringArray0 = new String[0];
      sortArguments0.parse(stringArray0);
      assertFalse(sortArguments0.isReverseOrder());
      assertFalse(sortArguments0.isFirstWordNumber());
      assertFalse(sortArguments0.isCaseIndependent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      sortArguments0.parse((String[]) null);
      assertFalse(sortArguments0.isCaseIndependent());
      assertFalse(sortArguments0.isReverseOrder());
      assertFalse(sortArguments0.isFirstWordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      boolean boolean0 = sortArguments0.isCaseIndependent();
      assertFalse(boolean0);
      assertFalse(sortArguments0.isReverseOrder());
      assertFalse(sortArguments0.isFirstWordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      boolean boolean0 = sortArguments0.isFirstWordNumber();
      assertFalse(sortArguments0.isReverseOrder());
      assertFalse(boolean0);
      assertFalse(sortArguments0.isCaseIndependent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      boolean boolean0 = sortArguments0.isReverseOrder();
      assertFalse(sortArguments0.isFirstWordNumber());
      assertFalse(sortArguments0.isCaseIndependent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SortArguments sortArguments0 = new SortArguments();
      sortArguments0.getFiles();
      assertFalse(sortArguments0.isFirstWordNumber());
      assertFalse(sortArguments0.isReverseOrder());
      assertFalse(sortArguments0.isCaseIndependent());
  }
}
