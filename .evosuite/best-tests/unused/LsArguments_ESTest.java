/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 06:37:52 GMT 2020
 */

package unused;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import unused.LsArguments;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LsArguments_ESTest extends LsArguments_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      assertFalse(lsArguments0.isRecursive());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-R";
      stringArray0[3] = "sg.edu.nus.comp.cs4218.exception.LsException";
      lsArguments0.parse(stringArray0);
      boolean boolean0 = lsArguments0.isRecursive();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      assertFalse(lsArguments0.isFoldersOnly());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Mf=}8VDcV66m(E";
      stringArray0[1] = "Y@bL9L{ab";
      stringArray0[2] = "";
      stringArray0[3] = "!4JyrU!F";
      stringArray0[4] = "-d";
      stringArray0[5] = ":Zf^\">5gd4Yz:Yqm";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      lsArguments0.parse(stringArray0);
      boolean boolean0 = lsArguments0.isFoldersOnly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-R";
      // Undeclared exception!
      try { 
        lsArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("unused.LsArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-h";
      // Undeclared exception!
      try { 
        lsArguments0.parse(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("unused.LsArguments", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      assertFalse(lsArguments0.isFoldersOnly());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "L#dmUwG";
      stringArray0[1] = "-d";
      stringArray0[2] = "L#dmUwG";
      lsArguments0.parse(stringArray0);
      lsArguments0.getFolders();
      assertTrue(lsArguments0.isFoldersOnly());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      String[] stringArray0 = new String[0];
      lsArguments0.parse(stringArray0);
      assertFalse(lsArguments0.isFoldersOnly());
      assertFalse(lsArguments0.isRecursive());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      lsArguments0.parse((String[]) null);
      assertFalse(lsArguments0.isRecursive());
      assertFalse(lsArguments0.isFoldersOnly());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      lsArguments0.getFolders();
      assertFalse(lsArguments0.isFoldersOnly());
      assertFalse(lsArguments0.isRecursive());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      boolean boolean0 = lsArguments0.isFoldersOnly();
      assertFalse(lsArguments0.isRecursive());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      LsArguments lsArguments0 = new LsArguments();
      boolean boolean0 = lsArguments0.isRecursive();
      assertFalse(lsArguments0.isFoldersOnly());
      assertFalse(boolean0);
  }
}
